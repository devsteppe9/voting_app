# version is now using "compose spec"
# v2 and v3 are now combined!
# docker-compose v1.27+ required

services:
  vote:
    build: 
      context: ./vote
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
    - kafka
        # condition: service_healthy
    healthcheck: 
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 10s
    volumes:
     - ./vote:/usr/local/app
    ports:
      - "8080:8080"
    networks:
      - front-tier
      - back-tier

  # result:
  #   build: ./result
  #   # use nodemon rather than node for local dev
  #   entrypoint: nodemon --inspect=0.0.0.0 server.js
  #   depends_on:
  #     db:
  #       condition: service_healthy 
  #   volumes:
  #     - ./result:/usr/local/app
  #   ports:
  #     - "8081:80"
  #     - "127.0.0.1:9229:9229"
  #   networks:
  #     - front-tier
  #     - back-tier

  worker:
    build:
      context: ./worker
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      VOTE_DB_URL: "jdbc:postgresql://vote-db:5432/cs544"
    depends_on:
    - kafka
    - vote-db
    networks:
      - back-tier

  kafka:
    image: apache/kafka:latest
    volumes:
      - "./healthchecks:/healthchecks"
    # healthcheck:
    #   test: ["CMD", "kafka-topics.sh", "--bootstrap-server=localhost:9092", "--list"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 3
    #   start_period: 15s
    environment:
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG_FLUSH_INTERVAL_MESSAGES: 1
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    networks:
      - back-tier

  vote-db:
    image: postgres:17-alpine
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: cs544
    volumes:
      # - "db-data:/var/lib/postgresql/data"
      - "./healthchecks:/healthchecks"
    healthcheck:
      test: /healthchecks/postgres.sh
      interval: "5s"
    networks:
      - back-tier
    # ports:
    #   - 5432:5432

  vote-db-adminer:
    image: adminer
    restart: always
    ports:
      - 8082:8080
    networks:
      - back-tier

  # this service runs once to seed the database with votes
  # it won't run unless you specify the "seed" profile
  # docker compose --profile seed up -d
  seed:
    build: ./seed-data
    profiles: ["seed"]
    depends_on:
      vote:
        condition: service_healthy 
    networks:
      - front-tier
    restart: "no"

volumes:
  db-data:

networks:
  front-tier:
  back-tier: