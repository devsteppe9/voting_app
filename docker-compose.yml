services:
  vote:
    build: 
      context: ./vote
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SESSION_API_URL: http://vote-session:8080/sessions
    depends_on:
      kafka:
        condition: service_healthy
      vote-session:
        condition: service_healthy
    healthcheck: 
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 10s
    volumes:
     - ./vote:/usr/local/app
    ports:
      - "8080:8080"
    networks:
      - front-tier
      - back-tier

  result:
    build:
      context: ./result
    environment:
      VOTE_DB_URL: "postgres://postgres:postgres@vote-db/cs544"
    # use nodemon rather than node for local dev
    entrypoint: nodemon --inspect=0.0.0.0 server.js
    depends_on:
      vote-db:
        condition: service_healthy 
    volumes:
      - ./result:/usr/local/app
    ports:
      - "8081:80"
      - "127.0.0.1:9229:9229"
    networks:
      - front-tier
      - back-tier

  vote-session:
    build:
      context: ./vote-session
    environment:
      VOTE_DB_URL: "jdbc:postgresql://vote-db:5432/cs544"
    depends_on:
      vote-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 10s
    ports:
      - 8082:8080
    networks:
      - front-tier
      - back-tier

  worker:
    build:
      context: ./worker
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      VOTE_DB_URL: "jdbc:postgresql://vote-db:5432/cs544"
    depends_on:
      kafka:
        condition: service_healthy
      vote-db:
        condition: service_healthy
      vote-session:
        condition: service_healthy
    networks:
      - back-tier

  kafka:
    image: apache/kafka:latest
    healthcheck:
      test: [ "CMD", "bash", "-c", 'nc -z localhost 9092' ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    environment:
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG_FLUSH_INTERVAL_MESSAGES: 1
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    networks:
      - back-tier

  vote-db:
    image: postgres:17-alpine
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: cs544
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - back-tier
    ports:
      - 5432:5432

  vote-db-adminer:
    image: adminer
    restart: always
    ports:
      - 8083:8080
    networks:
      - back-tier

networks:
  front-tier:
  back-tier:
